#!/usr/bin/perl

use strict;
use warnings;

use Getopt::Long;
use File::Copy qw(move);
use File::Path qw(make_path remove_tree);
use IPC::Open2 qw(open2);

# Parse command line arguments
my $usage = q(
Usage: spin-wordpress [OPTION...] SITE
       spin-wordpress --purge SITE

  SITE                 Site domain, required.
  
  --altname ALTNAME    Alternative domain. This would be redirected to SITE.
                       Default is automatic: Add 'www.' prefix or remove it if present.
		       Use '--altname=none' to disable alternative domain redirection.

  --title TITLE        Site title. Default is the same as SITE.
  --username USERNAME  Admin username. Default is 'admin'.
  --password PASSWORD  Admin password. Autogenerated if not present.
  --email EMAIL        Admin email. Required.

  --purge SITE         Deletes the site, with all the data, database and configuration.
                       Use with care.

);
my $altname;
my $title;
my $username = "admin";
my $password;
my $generated = 0;
my $email;
my $purge;
GetOptions(
  'altname|a=s' => \$altname,
  'title|t=s' => \$title,
  'username|u=s' => \$username,
  'password|p=s' => \$password,
  'email|e=s' => \$email,
  'purge' => \$purge,
  ) or die $usage;
my $site = shift or die $usage;
if (!defined($altname)) {
  if ($site =~ /^www\.(.*)$/) {
    $altname = $1;
  } else {
    $altname = "www.$site";
  }
}
if (!defined($title)) {
  $title = $site
}
if (!defined($password)) {
  chomp($password = `pwgen -n1`);
  $generated = 1;
}
if (!$purge && !defined($email)) {
  print STDERR "Option email is required\n";
  die $usage;
}

my $dir = "/var/www/" . $site;
my $database_name = $site; $database_name =~ s/\./_/g; 
my $nginx_config = "/etc/nginx/sites-enabled/$site";

if ($purge) {
  remove_tree $dir;
  open(my $mysql, "|-", "mysql");
  print $mysql "DROP DATABASE $database_name;\n";
  print $mysql "DROP USER '$database_name'\@'localhost';\n";
  close $mysql;
  remove_tree $nginx_config;
  system("systemctl restart nginx");
  exit 0;
}

# check if the site is clear, and abort early if it is not
if (-e $dir) {
  die "Site directory already exists: $dir";
}
if (index(`echo SHOW DATABASES | mysql`, $database_name) != -1) {
  die "Database $database_name already exists"
}
if (index(`echo SELECT user FROM mysql.user | mysql`, $database_name) != -1) {
  die "Mysql user $database_name already exists"
}
if (-e $nginx_config) {
  die "Nginx configuration already exists: $nginx_config"
}

# Download wordpress and extract it to place
make_path "/var/www/wordpress";
chdir "/var/www/wordpress";
system("wget --timestamping https://wordpress.org/latest.zip") == 0 or
  die "Failed to download wordpress";
remove_tree "/var/www/wordpress/wordpress";
system("unzip latest.zip") == 0 or die "Failed to extract wordpress" ;
move("/var/www/wordpress/wordpress", $dir);
system("chown --recursive www-data:www-data $dir") == 0 or
  die "Failed to chown the site directory: $dir";

# Create database
chomp(my $database_password = `pwgen -n1 12`);
my $mysql_pid = open2(">&1", my $mysql_in, "mysql");
print $mysql_in "CREATE DATABASE $database_name;\n";
print $mysql_in "CREATE USER '$database_name'\@'localhost'";
print $mysql_in "  IDENTIFIED BY '$database_password';\n";
print $mysql_in "GRANT ALL ON $database_name.* TO";
print $mysql_in "  '$database_name'\@'localhost';\n";
print $mysql_in "FLUSH PRIVILEGES;\n";
print $mysql_in "EXIT\n";
close $mysql_in;
waitpid $mysql_pid, 0;
($? >> 8) == 0 or die "Failed to create the database";

# Configure wordpress
chomp(my $salt = `pwgen -n1 12`);
open(my $sample, "<", "$dir/wp-config-sample.php")
  or die "Failed to find sample configuration file";
open(my $config, ">", "$dir/wp-config.php")
  or die "Failed to write wordpress configuration";
while (my $line = <$sample>) {
  $line =~ s/database_name_here/$database_name/;
  $line =~ s/username_here/$database_name/;
  $line =~ s/password_here/$database_password/;
  $line =~ s/put your unique phrase here/$salt/;
  print $config $line;
}
close $config;
close $sample;

# Install wordpress (populate database)
make_path "/var/www/wordpress";
chdir "/var/www/wordpress";
my $wp_url = "https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar";
system("wget --timestamping $wp_url") == 0 or
  die "Failed to download wp-cli";
chdir $dir;
my @install_args = (
  "sudo", "--user=www-data",
  "php", "/var/www/wordpress/wp-cli.phar", "core", "install",
  "--url=$site", "--title=$title",
  "--admin_user=$username", "--admin_password=$password",
  "--admin_email=$email");
system(@install_args) == 0 or die "Failed to install wordpress";

# Create nginx configuration
open(my $nginx, ">", "$nginx_config");
print $nginx "# Configuration auto-generated by spin-wordpress\n";
print $nginx "server {\n";
print $nginx "  server_name $site;\n";
print $nginx "  root $dir;\n";
print $nginx "  index index.php index.html index.htm;\n";
print $nginx "  client_max_body_size 64M;\n";
print $nginx "\n";
print $nginx "  location / {\n";
print $nginx "    try_files \$uri \$uri/ /index.php?\$args;\n";
print $nginx "  }\n";
print $nginx "\n";
print $nginx "  location ~ \.php\$ {\n";
print $nginx "    try_files \$uri =404;\n";
print $nginx "    include /etc/nginx/fastcgi_params;\n";
print $nginx "    fastcgi_read_timeout 3600s;\n";
print $nginx "    fastcgi_buffer_size 128k;\n";
print $nginx "    fastcgi_buffers 4 128k;\n";
print $nginx "    fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;\n";
print $nginx "    fastcgi_pass unix:/run/php/php7.3-fpm.sock;\n";
print $nginx "    fastcgi_index index.php;\n";
print $nginx "  }\n";
print $nginx "\n";
print $nginx "  access_log /var/log/nginx/$site.access.log;\n";
print $nginx "\n";
print $nginx "}\n";
if ($altname ne "none") {
  print $nginx "\n";
  print $nginx "server {\n";
  print $nginx "  server_name $altname;\n";
  print $nginx "  return 302 https://$site\$request_uri;\n";
  print $nginx "}\n";
}
close $nginx or die "Failed to write nginx configuration";
system("nginx -t") == 0 or die "Failed to configure nginx";
system("systemctl restart nginx");

# Obtain certificate
my @domains = ($site, ($altname ne "none" ? ($altname) : ()));
my $certbot_command = "certbot --nginx --redirect -d " . join(" -d ", @domains);
my $certbot_success = system($certbot_command) == 0;

# Print info
print "\n";
if ($certbot_success) {
  print "Site successfuly configured!\n";
  print "\n";
}
print "  Site: $site\n";
if ($altname ne "none") {
  print "  Alternative name: $altname\n";
}
print "  Title: $title\n";
print "  Admin access: https://$site/wp-admin\n";
print "  Admin username: $username\n";
if ($generated) {
  print "  Admin password: $password\n";
}
print "  Admin email: $email\n";
if (!$certbot_success) {
  print "\n";
  print "Site installed successfuly, but certbot certification failed.\n";
  print "Please double check DNS records for domain(s) @domains,\n";
  print "and rerun certbot command:\n";
  print "\n";
  print "$certbot_command\n";
}

# TODO cache.

